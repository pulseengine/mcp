# Real-World Validation Configuration
# This file defines test scenarios and server configurations for validating
# the MCP framework against real-world implementations.

[validation]
timeout_seconds = 30
max_concurrent_tests = 3
retry_attempts = 2
save_detailed_logs = true

[scenarios]
# Define different testing scenarios

[scenarios.compatibility_baseline]
name = "Protocol Compatibility Baseline"
description = "Tests basic protocol compliance across known implementations"
targets = [
    "anthropic/mcp-server-sqlite",
    "anthropic/mcp-server-filesystem",
    "modelcontextprotocol/python-sdk",
]
tests = [
    "protocol_handshake",
    "tool_discovery",
    "resource_listing",
    "error_handling"
]

[scenarios.stress_testing]
name = "Stress Testing"
description = "Tests server performance under load"
targets = ["local_test_server"]
tests = [
    "concurrent_requests",
    "large_payloads", 
    "rapid_reconnection",
    "memory_usage"
]

[scenarios.security_validation]
name = "Security Validation"
description = "Tests security aspects and potential vulnerabilities"
targets = ["all"]
tests = [
    "input_sanitization",
    "authentication_bypass",
    "data_injection",
    "resource_access_control"
]

[scenarios.fuzzing_comprehensive]
name = "Comprehensive Fuzzing"
description = "Exhaustive fuzzing of all protocol components"
duration_minutes = 15
targets = ["local_test_server"]
fuzz_targets = [
    "json_rpc_structure",
    "method_names",
    "parameter_values",
    "protocol_versions",
    "resource_uris",
    "tool_arguments",
    "authentication",
    "transport_layer"
]

# Known MCP server implementations for testing
[servers]

[servers.anthropic_sqlite]
name = "Anthropic SQLite Server"
repository = "https://github.com/anthropic/mcp-server-sqlite"
type = "python"
setup_commands = [
    "pip install -e .",
]
start_command = "python -m mcp_server_sqlite"
default_port = 3001
capabilities = ["tools", "resources"]
protocol_versions = ["2024-11-05"]

[servers.anthropic_filesystem]
name = "Anthropic Filesystem Server" 
repository = "https://github.com/anthropic/mcp-server-filesystem"
type = "python"
setup_commands = [
    "pip install -e .",
]
start_command = "python -m mcp_server_filesystem"
default_port = 3002
capabilities = ["resources"]
protocol_versions = ["2024-11-05"]

[servers.anthropic_git]
name = "Anthropic Git Server"
repository = "https://github.com/anthropic/mcp-server-git"
type = "python"
setup_commands = [
    "pip install -e .",
]
start_command = "python -m mcp_server_git"
default_port = 3003
capabilities = ["tools", "resources"]
protocol_versions = ["2024-11-05"]

[servers.python_sdk_example]
name = "Python SDK Example Server"
repository = "https://github.com/modelcontextprotocol/python-sdk"
type = "python"
setup_commands = [
    "pip install -e .",
]
start_command = "python examples/server.py"
default_port = 3004
capabilities = ["tools", "resources", "prompts"]
protocol_versions = ["2024-11-05"]

[servers.typescript_sdk_example]
name = "TypeScript SDK Example Server"
repository = "https://github.com/modelcontextprotocol/typescript-sdk"
type = "node"
setup_commands = [
    "npm install",
]
start_command = "npm run start"
default_port = 3005
capabilities = ["tools", "resources"]
protocol_versions = ["2024-11-05"]

# Test server configurations for local testing
[test_servers]

[test_servers.minimal_python]
name = "Minimal Python Test Server"
type = "python"
dockerfile = """
FROM python:3.11-slim
RUN pip install mcp fastapi uvicorn
WORKDIR /app
COPY test_server.py .
EXPOSE 8080
CMD ["python", "test_server.py"]
"""
server_code = """
import json
import uvicorn
from fastapi import FastAPI, Request
from mcp.types import *

app = FastAPI()

@app.post("/")
async def handle_mcp(request: Request):
    try:
        data = await request.json()
        
        if data.get("method") == "initialize":
            return {
                "jsonrpc": "2.0",
                "id": data.get("id"),
                "result": {
                    "protocolVersion": "2024-11-05",
                    "capabilities": {
                        "tools": {},
                        "resources": {}
                    },
                    "serverInfo": {
                        "name": "minimal-test-server",
                        "version": "1.0.0"
                    }
                }
            }
        elif data.get("method") == "tools/list":
            return {
                "jsonrpc": "2.0", 
                "id": data.get("id"),
                "result": {
                    "tools": [
                        {
                            "name": "echo",
                            "description": "Echo back input",
                            "inputSchema": {
                                "type": "object",
                                "properties": {
                                    "message": {"type": "string"}
                                }
                            }
                        }
                    ]
                }
            }
        elif data.get("method") == "tools/call":
            args = data.get("params", {}).get("arguments", {})
            return {
                "jsonrpc": "2.0",
                "id": data.get("id"), 
                "result": {
                    "content": [
                        {
                            "type": "text",
                            "text": f"Echo: {args.get('message', '')}"
                        }
                    ]
                }
            }
        else:
            return {
                "jsonrpc": "2.0",
                "id": data.get("id"),
                "error": {
                    "code": -32601,
                    "message": "Method not found"
                }
            }
    except Exception as e:
        return {
            "jsonrpc": "2.0", 
            "id": data.get("id") if 'data' in locals() else None,
            "error": {
                "code": -32603,
                "message": f"Internal error: {str(e)}"
            }
        }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8080)
"""

[test_servers.comprehensive_node]
name = "Comprehensive Node.js Test Server"
type = "node"
dockerfile = """
FROM node:18-slim
WORKDIR /app
COPY package.json .
RUN npm install
COPY server.js .
EXPOSE 8080
CMD ["node", "server.js"]
"""
package_json = """
{
  "name": "mcp-test-server",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.18.0"
  }
}
"""
server_code = """
const express = require('express');
const app = express();

app.use(express.json());

const tools = [
  {
    name: "calculator",
    description: "Perform basic calculations",
    inputSchema: {
      type: "object",
      properties: {
        operation: { type: "string", enum: ["add", "subtract", "multiply", "divide"] },
        a: { type: "number" },
        b: { type: "number" }
      },
      required: ["operation", "a", "b"]
    }
  },
  {
    name: "uuid_generator",
    description: "Generate a UUID",
    inputSchema: {
      type: "object",
      properties: {}
    }
  }
];

const resources = [
  {
    uri: "file://test.txt",
    name: "Test File",
    description: "A test file resource",
    mimeType: "text/plain"
  }
];

app.post('/', (req, res) => {
  const { method, params, id } = req.body;
  
  try {
    switch (method) {
      case 'initialize':
        res.json({
          jsonrpc: "2.0",
          id,
          result: {
            protocolVersion: "2024-11-05",
            capabilities: {
              tools: {},
              resources: {},
              prompts: {}
            },
            serverInfo: {
              name: "comprehensive-test-server",
              version: "1.0.0"
            }
          }
        });
        break;
        
      case 'tools/list':
        res.json({
          jsonrpc: "2.0",
          id,
          result: { tools }
        });
        break;
        
      case 'tools/call':
        const { name, arguments: args } = params;
        let result;
        
        if (name === 'calculator') {
          const { operation, a, b } = args;
          switch (operation) {
            case 'add': result = a + b; break;
            case 'subtract': result = a - b; break;
            case 'multiply': result = a * b; break;
            case 'divide': result = b !== 0 ? a / b : 'Error: Division by zero'; break;
          }
        } else if (name === 'uuid_generator') {
          result = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = Math.random() * 16 | 0;
            const v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
          });
        }
        
        res.json({
          jsonrpc: "2.0",
          id,
          result: {
            content: [
              { type: "text", text: String(result) }
            ]
          }
        });
        break;
        
      case 'resources/list':
        res.json({
          jsonrpc: "2.0",
          id,
          result: { resources }
        });
        break;
        
      case 'resources/read':
        res.json({
          jsonrpc: "2.0",
          id,
          result: {
            contents: [
              {
                uri: params.uri,
                mimeType: "text/plain",
                text: "This is test content from the comprehensive test server."
              }
            ]
          }
        });
        break;
        
      default:
        res.json({
          jsonrpc: "2.0",
          id,
          error: {
            code: -32601,
            message: `Method not found: ${method}`
          }
        });
    }
  } catch (error) {
    res.json({
      jsonrpc: "2.0",
      id,
      error: {
        code: -32603,
        message: `Internal error: ${error.message}`
      }
    });
  }
});

app.listen(8080, () => {
  console.log('Comprehensive MCP test server running on port 8080');
});
"""

# Validation test definitions
[tests]

[tests.protocol_handshake]
name = "Protocol Handshake"
description = "Test initialize method and capability negotiation"
steps = [
    { method = "initialize", expected_status = "success" },
    { method = "initialized", expected_status = "success" }
]

[tests.tool_discovery]
name = "Tool Discovery and Execution"
description = "Test tool listing and calling functionality"
steps = [
    { method = "tools/list", expected_status = "success" },
    { method = "tools/call", params = { name = "echo", arguments = { message = "test" } }, expected_status = "success" }
]

[tests.resource_listing]
name = "Resource Access"
description = "Test resource discovery and reading"
steps = [
    { method = "resources/list", expected_status = "success" },
    { method = "resources/read", params = { uri = "file://test.txt" }, expected_status = "success" }
]

[tests.error_handling]
name = "Error Handling"
description = "Test proper error responses for invalid requests"
steps = [
    { method = "nonexistent_method", expected_status = "error", expected_error_code = -32601 },
    { method = "tools/call", params = { name = "nonexistent_tool" }, expected_status = "error" }
]

[tests.concurrent_requests]
name = "Concurrent Request Handling"
description = "Test server's ability to handle multiple simultaneous requests"
concurrent_requests = 10
request_pattern = { method = "tools/list" }

[tests.large_payloads]
name = "Large Payload Handling"
description = "Test server's handling of large request/response payloads"
payload_sizes = [1024, 10240, 102400]  # bytes

[tests.input_sanitization]
name = "Input Sanitization"
description = "Test server's handling of potentially malicious inputs"
malicious_inputs = [
    "'; DROP TABLE users; --",
    "<script>alert('xss')</script>",
    "../../../etc/passwd",
    "\x00\x01\x02\x03"
]

# Reporting configuration
[reporting]
output_formats = ["json", "html", "markdown"]
include_detailed_logs = true
generate_charts = true
save_raw_responses = false

[reporting.thresholds]
minimum_compliance_score = 80.0
maximum_response_time_ms = 5000
maximum_error_rate_percent = 5.0